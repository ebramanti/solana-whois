{"version":3,"sources":["utils/resolveDomains.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SOLANA_TLD_AUTHORITY","PublicKey","resolveDomains","input","a","connection","Connection","lines","split","Promise","all","map","line","endsWith","domain","replace","getHashedName","hashedName","getNameAccountKey","undefined","addresses","domainNameAccountKeys","index","validDomainNameAccountKeys","filter","nameAccountKey","NameRegistryState","retrieveBatch","nameRegistryData","domainOwnerMap","reduce","state","owner","toBase58","App","useState","domains","setDomains","setAddresses","resolving","setResolving","onResolveDomains","useCallback","then","rawAddresses","join","finally","Container","fluid","className","Row","style","paddingTop","padding","Col","Form","Control","as","placeholder","rows","value","onChange","event","target","onKeyDown","code","metaKey","wrap","md","marginTop","marginBottom","paddingBottom","size","Button","variant","onClick","disabled","readOnly","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.298a7041.chunk.js","sourcesContent":["import { getHashedName, getNameAccountKey, NameRegistryState } from \"@bonfida/spl-name-service\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nconst SOLANA_TLD_AUTHORITY = new PublicKey(\n  \"58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx\"\n);\n\ntype Domain = string;\n\nexport const resolveDomains = async (input: string) => {\n  const connection = new Connection(\"https://solana-api.projectserum.com/\");\n  const lines = input.split(\"\\n\");\n  const addresses = await Promise.all(\n    lines.map(async (line) => {\n      if (line.endsWith(\".sol\")) {\n        const domain = line.replace(\".sol\", \"\");\n        const hashedName: Buffer = await getHashedName(domain);\n        return getNameAccountKey(hashedName, undefined, SOLANA_TLD_AUTHORITY);\n      }\n      return undefined;\n    })\n  );\n  const domainNameAccountKeys: [Domain, PublicKey | undefined][] = lines.map(\n    (line, index) => [line, addresses[index]]\n  );\n\n  const validDomainNameAccountKeys = domainNameAccountKeys.filter(\n    (nameAccountKey): nameAccountKey is [Domain, PublicKey] =>\n      !!nameAccountKey[1]\n  );\n  const nameRegistryData = await NameRegistryState.retrieveBatch(\n    connection,\n    validDomainNameAccountKeys.map(([, nameAccountKey]) => nameAccountKey)\n  );\n\n  const domainOwnerMap = nameRegistryData.reduce<{\n    [domain: string]: PublicKey;\n  }>((map, state, index) => {\n    if (state) {\n      const [domain] = validDomainNameAccountKeys[index];\n      return {\n        ...map,\n        [domain]: state.owner,\n      };\n    }\n\n    return map;\n  }, {});\n\n  return domainNameAccountKeys.map(([domain]) => {\n    if (domain === \"\") {\n      return \"\";\n    }\n    return (\n      domainOwnerMap[domain]?.toBase58() ?? \"------Invalid .sol Domain------\"\n    );\n  });\n};\n","import { Button, Col, Container, Form, Row } from \"react-bootstrap\";\nimport { ArrowRight } from \"react-bootstrap-icons\";\nimport { useCallback, useState } from \"react\";\nimport { resolveDomains } from \"./utils/resolveDomains\";\n\nexport default function App() {\n  const [domains, setDomains] = useState<string>(\"\");\n  const [addresses, setAddresses] = useState<string>(\"\");\n  const [resolving, setResolving] = useState<boolean>(false);\n\n  const onResolveDomains = useCallback(() => {\n    setResolving(true);\n    resolveDomains(domains)\n      .then((rawAddresses) => setAddresses(rawAddresses.join(\"\\n\")))\n      .finally(() => setResolving(false));\n  }, [domains]);\n\n  return (\n      <Container fluid className=\"text-center\">\n        <Row style={{ paddingTop: \"20px\" }}>\n          <h1>Solana Name Service WHOIS Lookup</h1>\n          <h3>\n            Paste in .sol addresses below to resolve them to their respective\n            Solana address.\n          </h3>\n          <p>\n            Shortcut: Use CMD+ENTER when the domain textarea is highlighted to\n            resolve domains\n          </p>\n        </Row>\n        <Row style={{ padding: \"10px\" }}>\n          <Col>\n            <Form.Control\n              as=\"textarea\"\n              placeholder=\"Enter .sol domains\"\n              rows={20}\n              value={domains}\n              onChange={(event) => setDomains(event.target.value)}\n              onKeyDown={(event) => {\n                if (event.code === \"Enter\" && event.metaKey) {\n                  onResolveDomains();\n                }\n              }}\n              wrap=\"off\"\n            />\n          </Col>\n          <Col\n            md=\"auto\"\n            style={{\n              marginTop: \"auto\",\n              marginBottom: \"auto\",\n              paddingBottom: \"50px\",\n            }}\n          >\n            <ArrowRight size={96} />\n            <br />\n            <Button\n              variant=\"primary\"\n              onClick={onResolveDomains}\n              disabled={resolving}\n            >\n              {resolving ? \"Loading...\" : \"Resolve\"}\n            </Button>\n          </Col>\n          <Col>\n            <Form.Control\n              as=\"textarea\"\n              rows={20}\n              readOnly\n              value={addresses}\n              wrap=\"off\"\n            />\n          </Col>\n        </Row>\n        <footer className=\"fixed-bottom text-muted\">\n            Inspired by{\" \"}\n            <a href=\"https://twitter.com/levicook/status/1469081746620784641\">\n              this tweet.\n            </a>\n          <p>\n            My tip address üôáüèª‚Äç‚ôÇÔ∏è: <code>2B3qD2ztbo8r1VSKVA4TD9PbGB7NbKVpg7JHxH28EuG2</code>\n          </p>\n        </footer>\n      </Container>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}